steps:
  - powershell: |
      Write-Host "Determining project version from package info..."
      $packageJsonFile = "$(System.DefaultWorkingDirectory)\$(project.name)\Packages\$(package.name)\package.json"
      $packageInfo = (Get-Content $packageJsonFile -Raw) | ConvertFrom-Json

      Write-Host "Detected Project Version:" $packageInfo.version

      Write-Host "Determining latest release version from GitHub..."
      $releases = "https://api.github.com/repos/$(Build.Repository.Name)/releases"
      $secpasswd = ConvertTo-SecureString $(GitHubPat) -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential("XRTK-Build-Bot", $secpasswd)

      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $oldVersionString = [string](Invoke-WebRequest -Uri $releases -Credential $credential -UseBasicParsing | ConvertFrom-Json)[0].tag_name

      Write-Host "Detected last GitHub release: $oldVersionString"

      # Strip SemVer since version type is not compatible. We do a hard replace on the preview tag anyway.
      $version = [version] ($packageInfo.version -replace "-preview.\d*", "")

      if( [string]::IsNullOrEmpty($oldVersionString) ) {
        $oldVersionString = $packageInfo.version
      }

      $oldVersion = [version] ($oldVersionString -replace "-preview.\d*", "")

      if( '$(isPreviewBuild)' -eq 'True' ) {
        Write-Host "Update Preview Build Version"
        # if preview only bump build number if less than

        if( $version -lt $oldVersion ) {
          $version = [version]::new($oldVersion.Major, $oldVersion.Minor, $oldVersion.Build + 1)
        }
      }
      else {
        if( '$(isReleaseBuild)' -eq 'True' ) {
          Write-Host "Update Release Build Version"
          # if release build, then always bump build number if less than or equal

          if( $version -le $oldVersion ) {
            $version = [version]::new($oldVersion.Major, $oldVersion.Minor, $oldVersion.Build + 1)
          }
        }
      }

      if ( '$(isPreviewBuild)' -eq 'True' ) {
        # 0.2.0-preview.1

        $buildNumber = '$(Build.BuildNumber)'
        $split = $buildNumber.Split('.')
        $revision = $split[$split.Count - 1]
        $packageInfo.version = ([string] $version) + "-preview.$revision"
        Write-Host $oldVersionString -> $packageInfo.version
      }
      else {
        Write-Host Last Release Version: $oldVersion -> Current Project Version $version
        $packageInfo.version = [string] $version
      }

      Write-Host "##vso[task.setvariable variable=package.version]$($packageInfo.version)"
      $packageInfo | ConvertTo-Json | Set-Content $packageJsonFile
      # NOTE: packageInfo is only committed back to the master branch in build-docs.yaml when doing a release build
    failOnStderr: true
    displayName: 'Sync Package Info'
