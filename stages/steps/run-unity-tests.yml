steps:
  - powershell: |
      Write-Host "Starting ${{ parameters.target }} Unit Tests..."

      $date = Get-Date -Format "yyyyMMddTHHmmss"
      $logPrefix = "$(LogDirectory)\${{ parameters.target }}-Tests-$date"
      $logPath = "$logPrefix.log"
      $testPath = "$logPrefix.xml"
      $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -buildTarget ${{ parameters.target }} -logfile `"$logPath`" -editorTestsResultFile `"$testPath`" -runEditorTests" -PassThru

      $ljob = Start-Job -ScriptBlock {
        param($log)

        while ( -not (Test-Path $log -Type Leaf) ) {
            Start-Sleep -Seconds 1
        }

        Get-Content "$log" -Wait
      } -ArgumentList $logPath

      while ( -not $process.HasExited )
      {
        # While waiting, Get-Content checks the file once each second
        Start-Sleep -Seconds 1
        Receive-Job $ljob
      }

      # Wait for the last of the log information to be written
      $fileLocked = $true

      while ( $fileLocked )
      {
        try
        {
          $file = Convert-Path $logPath
          $fileStream = [System.IO.File]::Open($file,'Open','Write')
          $fileStream.Close()
          $fileStream.Dispose()
          $fileLocked = $false
        }
        catch
        {
          $fileLocked = $true
          Start-Sleep -Seconds 1
          Receive-Job $ljob
        }
      }

      # Clean up job
      Receive-Job $ljob
      Stop-Job $ljob
      Remove-Job $ljob

      exit $process.ExitCode
    failOnStderr: true
    displayName: 'Run ${{ parameters.target }} Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish ${{ parameters.target }} Test Results'
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: '${{ parameters.target }}-Tests*.xml'
      searchFolder: '$(LogDirectory)'
      mergeTestResults: true
      failTaskOnFailedTests: true
    condition: succeededOrFailed()
